class Solution {
public:
    vector<int> findOrder(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<vector <int>> vec(numCourses, vector<int>(0));
        vector<int> res;
        vector <int> l(numCourses,0);
        
        //Build graph
        for (auto & pre: prerequisites){
         vec[pre.second].push_back(pre.first);
         l[pre.first]++;
        }
        
         queue<int> q;
         for (int i=0;i<numCourses;i++)
            if (l[i]==0) q.push(i);
         
         while (!q.empty())
         {
             int t=q.front();
             for (int i=0;i<vec[t].size();i++)
             {
                 l[vec[t][i]]--;
                if (l[vec[t][i]]==0) q.push(vec[t][i]);
             }
             res.push_back(t); 
             q.pop();
             
         }
         
         if (res.size()!=numCourses) 
         {
             vector<int> vec1;
            return vector<int>();
         }
         return res;
    }
    
};
