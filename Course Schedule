class Solution {
public:

bool canFinish(int numCourses, vector<pair<int, int>>& prerequisites) {
        vector<unordered_set<int>> vec (numCourses);
       
       //Build graph 
         for (int i=0;i<prerequisites.size();i++)
            vec[prerequisites[i].second].insert(prerequisites[i].first);
    
       unordered_set <int> visited;
        vector<bool> flag(numCourses, false);
          for (int i=0;i<numCourses;i++)
            if (!flag[i])
               if( DFS(vec, visited, i, flag))
                    return false;
        return true;
}

//If there has cycle, return true
   bool DFS(vector <unordered_set<int>>& vec, unordered_set <int> &visited, int b, vector<bool>& flag )
    {
        flag[b]=true;
        visited.insert(b);
        for (auto it=vec[b].begin(); it!=vec[b].end();it++)
        {
            if (visited.find(*it)!=visited.end() || DFS(vec, visited, *it, flag))
                return true;
        }
        visited.erase(b);
        return false;
    }
};
