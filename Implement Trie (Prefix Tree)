class TrieNode {
public:
    // Initialize your data structure here.
        bool isend = false;
        char content;
        TrieNode * children [26];
        TrieNode() {
            for (int i = 0; i< 26; i++)
                children[i] = NULL;
                isend = false;
        }
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    void insert(string word) {
        TrieNode * node = root;
        for (int i = 0; i<word.size(); i++){
            if (node -> children[word[i] - 'a'] != NULL)
                node = node ->children[word[i] - 'a'];
            else{
                node ->children[word[i] - 'a'] = new TrieNode();
                node = node ->children[word[i] - 'a'];
            }
        }
       
        node -> isend = true;
    }

    // Returns if the word is in the trie.
    bool search(string word) {
        
        TrieNode * node = root;
        for (int i = 0; i<word.size(); i++){
            if (node -> children[word[i] - 'a'] != NULL)
                node = node ->children[word[i] - 'a'];
            else{
                node = node ->children[word[i] - 'a']; 
                break;
            }
        }
        if (node == NULL){
            return false;
        }
        
        return node-> isend;
        
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix) {
         TrieNode * node = root;
        for (int i = 0; i<prefix.size(); i++){
            if (node -> children[prefix[i] - 'a'] != NULL)
                node = node ->children[prefix[i] - 'a'];
            else
                return false;
            
        }
        
        return true;
    }

private:
    TrieNode* root;
};

// Your Trie object will be instantiated and called as such:
// Trie trie;
// trie.insert("somestring");
// trie.search("key");
