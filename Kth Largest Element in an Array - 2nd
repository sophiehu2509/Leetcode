class Solution {
public:
    /*int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int> pq(nums.begin(), nums.end());
        for (int i = 0; i<k - 1; i++)
            pq.pop();
            
        return pq.top();
    }*/
    
    //quick sort
    
    /*int findKthLargest(vector<int>& nums, int k) {
        int i, j, privot, head = 0, tail = nums.size() - 1;
        
        while (1){
            i = head;
            j = tail;
            privot = nums[i];
            while (i <= j) {
               
                if (nums[i] >= privot)
                    i ++;
                else if (nums[j] <= privot)
                    j --;
                else
                  swap(nums[i], nums[j]);

            }
            swap(nums[head], nums[j]);
            
            if (j == k - 1) return nums[j];
            if (j < k - 1) {
                head = j + 1;
            }
            else{
                tail = j - 1;
            }
            
        }
    }*/
    
    int findKthLargest(vector<int>& nums, int k)  {
        int i,j, privot, head = 0, tail = nums.size() - 1;
        
        while (1){
            i = head;
            j = tail;
            privot = nums[i ++];
            while (i<= j){
                if (nums[i] >= privot)
                    i ++;
                else if(nums[j] < privot)
                    j --;
                else 
                    swap(nums[i], nums[j]);
            }
            swap(privot, nums[j]);
            
            if (j + 1 == k)
                return privot;
            if (j + 1 > k)
                tail = j - 1;
            else if (j + 1 < k)
                head = j + 1;

        }
        
    }
    
    
   
};
