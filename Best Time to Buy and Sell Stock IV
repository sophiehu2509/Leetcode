class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        int len = prices.size();
        if (k < 1)
            return 0;
        if (k >= len/2){
            int ans = 0;
            for (int i = 1; i<len; i++)
                if (prices[i] > prices[i - 1])
                    ans += (prices[i] - prices[i - 1]);
                    
            return ans;
        }
        
        vector<vector<int>> hold (len, vector<int> (k + 1, 0));
        vector<vector<int>> unhold (len, vector<int> (k + 1, 0));
        hold[0][0] = -prices[0];
        for (int i = 1; i<len; i++)
            hold[i][0] = max(hold[i - 1][0], -prices[i]);
         
        for (int i = 0; i<=k; i++)
            hold[0][i] = -prices[0];
            
        for (int i = 1; i<len; i++){
            for (int j = 1; j<= k; j++){
                hold[i][j] = max(unhold[i- 1][j] - prices[i], hold[i - 1][j]);
                unhold[i][j] = max(unhold[i- 1][j], prices[i] + hold[i - 1][j - 1] );
            }
        }
        
        return max(hold[len - 1][k], unhold[len - 1][k]);
        
    }
};
