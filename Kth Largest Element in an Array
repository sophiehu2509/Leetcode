class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
    int start=0;
    int end=nums.size()-1;
    
    int pivot=0;
    pivot=quick(nums, 0, nums.size()-1, k);
    while (pivot!=k-1 ){
        if (pivot<k-1) start=pivot+1;
        if (pivot>k-1) end=pivot-1;
        pivot=quick(nums, start, end, k);
    }
    return nums[pivot];;
}
    
    int quick(vector<int>& nums, int p, int q, int k){
    if (p==q) return p;
    int kth=nums[q];
    int i=p-1;
    
    if (p<q){
        for (int j=p;j<=q-1;j++){
            if (nums[j]>=kth) {
                i++;
                swap(nums[i], nums[j]);
            }
        }
    }
    swap(nums[i+1], nums[q]);
    return i+1;
}
};
